// DO NOT EDIT: This file is generated by var_gen.go

package beluga

const (
	varApplication      = "BELUGA_APPLICATION"
	varComposeFile      = "BELUGA_COMPOSE_FILE"
	varComposeTemplate  = "BELUGA_COMPOSE_TEMPLATE"
	varContext          = "BELUGA_CONTEXT"
	varDefaultBranch    = "BELUGA_DEFAULT_BRANCH"
	varDockerfile       = "BELUGA_DOCKERFILE"
	varDomain           = "BELUGA_DOMAIN"
	varEnvironment      = "BELUGA_ENVIRONMENT"
	varImage            = "BELUGA_IMAGE"
	varRegistry         = "BELUGA_REGISTRY"
	varRegistryPassword = "BELUGA_REGISTRY_PASSWORD"
	varRegistryUsername = "BELUGA_REGISTRY_USERNAME"
	varStackName        = "BELUGA_STACK_NAME"
	varVersion          = "BELUGA_VERSION"
)

var knownVarNames = []string{
	varApplication,
	varComposeFile,
	varComposeTemplate,
	varContext,
	varDefaultBranch,
	varDockerfile,
	varDomain,
	varEnvironment,
	varImage,
	varRegistry,
	varRegistryPassword,
	varRegistryUsername,
	varStackName,
	varVersion,
}

// If provided, name of the (sub)application to compile
func (e Environment) Application() string {
	return e[varApplication]
}

// A template docker-compose file that may contain modifies the compose file
// to work in different contexts
func (e Environment) ComposeTemplate() string {
	return e[varComposeTemplate]
}

// Context of the docker build, defaults to root of the project
func (e Environment) Context() string {
	return e[varContext]
}

// Dockerfile to use in docker build, defaults `Dockerfile` in the context
// directory (like docker does)
func (e Environment) Dockerfile() string {
	return e[varDockerfile]
}

// Domain name to deploy the stack to. This will be passed to the environment
// when doing the docker deploy, so the compose file can reference this
// appropriately.
func (e Environment) Domain() string {
	return e[varDomain]
}

// Environment to deploy to. "review", "staging", "production" are defaults,
// but any string may be used.
func (e Environment) Environment() string {
	return e[varEnvironment]
}

// Docker image path to push to after build
func (e Environment) Image() string {
	return e[varImage]
}

// Docker registry to log into before pushing
func (e Environment) Registry() string {
	return e[varRegistry]
}

// Password to use to log into Docker registry
func (e Environment) RegistryPassword() string {
	return e[varRegistryPassword]
}

// Username to use to log into Docker registry
func (e Environment) RegistryUsername() string {
	return e[varRegistryUsername]
}

func (e Environment) StackName() string {
	return e[varStackName]
}

// Version of the application being built/deployed
func (e Environment) Version() string {
	return e[varVersion]
}
