// DO NOT EDIT: This file is generated by var_gen.go

package lib

const (
	varApplication       = "BELUGA_APPLICATION"
	varDeployDockerHost  = "BELUGA_DEPLOY_DOCKER_HOST"
	varDockerComposeFile = "BELUGA_DOCKER_COMPOSE_FILE"
	varDockerContext     = "BELUGA_DOCKER_CONTEXT"
	varDockerfile        = "BELUGA_DOCKERFILE"
	varDomain            = "BELUGA_DOMAIN"
	varEnvironment       = "BELUGA_ENVIRONMENT"
	varGitDefaultBranch  = "BELUGA_GIT_DEFAULT_BRANCH"
	varImage             = "BELUGA_IMAGE"
	varRegistry          = "BELUGA_REGISTRY"
	varRegistryPassword  = "BELUGA_REGISTRY_PASSWORD"
	varRegistryUsername  = "BELUGA_REGISTRY_USERNAME"
	varVariant           = "BELUGA_VARIANT"
	varVersion           = "BELUGA_VERSION"
)

var knownVarNames = []string{
	varApplication,
	varDeployDockerHost,
	varDockerComposeFile,
	varDockerContext,
	varDockerfile,
	varDomain,
	varEnvironment,
	varGitDefaultBranch,
	varImage,
	varRegistry,
	varRegistryPassword,
	varRegistryUsername,
	varVariant,
	varVersion,
}

func (e Environment) Application() string {
	return e[varApplication]
}

func (e Environment) DeployDockerHost() string {
	return e[varDeployDockerHost]
}

func (e Environment) DockerComposeFile() string {
	return e[varDockerComposeFile]
}

func (e Environment) DockerContext() string {
	return e[varDockerContext]
}

func (e Environment) Dockerfile() string {
	return e[varDockerfile]
}

func (e Environment) Domain() string {
	return e[varDomain]
}

func (e Environment) Environment() string {
	return e[varEnvironment]
}

func (e Environment) GitDefaultBranch() string {
	return e[varGitDefaultBranch]
}

func (e Environment) Image() string {
	return e[varImage]
}

func (e Environment) Registry() string {
	return e[varRegistry]
}

func (e Environment) RegistryPassword() string {
	return e[varRegistryPassword]
}

func (e Environment) RegistryUsername() string {
	return e[varRegistryUsername]
}

// Variant build of the application. This is helpful for situations where one
// application is deployed with different builds for different settings.
func (e Environment) Variant() string {
	return e[varVariant]
}

// Version of the application being built/deployed
func (e Environment) Version() string {
	return e[varVersion]
}
